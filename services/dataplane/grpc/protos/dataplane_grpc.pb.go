// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: dataplane.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataplaneClient is the client API for Dataplane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataplaneClient interface {
	PutMessage(ctx context.Context, in *PutMessageReq, opts ...grpc.CallOption) (*PutMessageRes, error)
}

type dataplaneClient struct {
	cc grpc.ClientConnInterface
}

func NewDataplaneClient(cc grpc.ClientConnInterface) DataplaneClient {
	return &dataplaneClient{cc}
}

func (c *dataplaneClient) PutMessage(ctx context.Context, in *PutMessageReq, opts ...grpc.CallOption) (*PutMessageRes, error) {
	out := new(PutMessageRes)
	err := c.cc.Invoke(ctx, "/kanthor.dataplane.v1.Dataplane/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataplaneServer is the server API for Dataplane service.
// All implementations must embed UnimplementedDataplaneServer
// for forward compatibility
type DataplaneServer interface {
	PutMessage(context.Context, *PutMessageReq) (*PutMessageRes, error)
	mustEmbedUnimplementedDataplaneServer()
}

// UnimplementedDataplaneServer must be embedded to have forward compatible implementations.
type UnimplementedDataplaneServer struct {
}

func (UnimplementedDataplaneServer) PutMessage(context.Context, *PutMessageReq) (*PutMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (UnimplementedDataplaneServer) mustEmbedUnimplementedDataplaneServer() {}

// UnsafeDataplaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataplaneServer will
// result in compilation errors.
type UnsafeDataplaneServer interface {
	mustEmbedUnimplementedDataplaneServer()
}

func RegisterDataplaneServer(s grpc.ServiceRegistrar, srv DataplaneServer) {
	s.RegisterService(&Dataplane_ServiceDesc, srv)
}

func _Dataplane_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanthor.dataplane.v1.Dataplane/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).PutMessage(ctx, req.(*PutMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dataplane_ServiceDesc is the grpc.ServiceDesc for Dataplane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dataplane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kanthor.dataplane.v1.Dataplane",
	HandlerType: (*DataplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutMessage",
			Handler:    _Dataplane_PutMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane.proto",
}

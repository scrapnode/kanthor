// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/scrapnode/kanthor/config"
	"github.com/scrapnode/kanthor/infrastructure"
	"github.com/scrapnode/kanthor/infrastructure/authenticator"
	"github.com/scrapnode/kanthor/infrastructure/logging"
	"github.com/scrapnode/kanthor/services"
	"github.com/scrapnode/kanthor/services/attempt/trigger"
	"github.com/scrapnode/kanthor/services/dispatcher"
	"github.com/scrapnode/kanthor/services/portalapi"
	"github.com/scrapnode/kanthor/services/scheduler"
	"github.com/scrapnode/kanthor/services/sdkapi"
	"github.com/scrapnode/kanthor/services/storage"
	"github.com/scrapnode/kanthor/usecases/attempt"
	"github.com/scrapnode/kanthor/usecases/attempt/repos"
	dispatcher2 "github.com/scrapnode/kanthor/usecases/dispatcher"
	"github.com/scrapnode/kanthor/usecases/portal"
	repos2 "github.com/scrapnode/kanthor/usecases/portal/repos"
	scheduler2 "github.com/scrapnode/kanthor/usecases/scheduler"
	repos3 "github.com/scrapnode/kanthor/usecases/scheduler/repos"
	"github.com/scrapnode/kanthor/usecases/sdk"
	repos4 "github.com/scrapnode/kanthor/usecases/sdk/repos"
	storage2 "github.com/scrapnode/kanthor/usecases/storage"
	repos5 "github.com/scrapnode/kanthor/usecases/storage/repos"
)

// Injectors from wire_attempt_trigger.go:

func InitializeAttemptTriggerPlanner(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	attempt, err := InitializeAttemptUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := trigger.NewPlanner(conf, logger, infrastructureInfrastructure, attempt)
	return service, nil
}

func InitializeAttemptTriggerExecutor(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	attempt, err := InitializeAttemptUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := trigger.NewExecutor(conf, logger, infrastructureInfrastructure, attempt)
	return service, nil
}

func InitializeAttemptUsecase(conf *config.Config, logger logging.Logger, infra *infrastructure.Infrastructure) (attempt.Attempt, error) {
	datastoreConfig := &conf.Datastore
	repositories := repos.New(datastoreConfig, logger)
	attemptAttempt := attempt.New(conf, logger, infra, repositories)
	return attemptAttempt, nil
}

// Injectors from wire_dispatcher.go:

func InitializeDispatcher(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	dispatcherDispatcher, err := InitializeDispatcherUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := dispatcher.New(conf, logger, infrastructureInfrastructure, dispatcherDispatcher)
	return service, nil
}

func InitializeDispatcherUsecase(conf *config.Config, logger logging.Logger, infra *infrastructure.Infrastructure) (dispatcher2.Dispatcher, error) {
	dispatcherDispatcher := dispatcher2.New(conf, logger, infra)
	return dispatcherDispatcher, nil
}

// Injectors from wire_portal_api.go:

func InitializePortalApi(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	authenticatorConfig := ResolvePortalApiAuthenticatorConfig(conf)
	authenticatorAuthenticator, err := authenticator.New(authenticatorConfig, logger)
	if err != nil {
		return nil, err
	}
	portal, err := InitializePortalUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := portalapi.New(conf, logger, infrastructureInfrastructure, authenticatorAuthenticator, portal)
	return service, nil
}

func InitializePortalUsecase(conf *config.Config, logger logging.Logger, infra *infrastructure.Infrastructure) (portal.Portal, error) {
	databaseConfig := &conf.Database
	repositories := repos2.New(databaseConfig, logger)
	portalPortal := portal.New(conf, logger, infra, repositories)
	return portalPortal, nil
}

// Injectors from wire_scheduler.go:

func InitializeScheduler(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	schedulerScheduler, err := InitializeSchedulerUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := scheduler.New(conf, logger, infrastructureInfrastructure, schedulerScheduler)
	return service, nil
}

func InitializeSchedulerUsecase(conf *config.Config, logger logging.Logger, infra *infrastructure.Infrastructure) (scheduler2.Scheduler, error) {
	databaseConfig := &conf.Database
	repositories := repos3.New(databaseConfig, logger)
	schedulerScheduler := scheduler2.New(conf, logger, infra, repositories)
	return schedulerScheduler, nil
}

// Injectors from wire_sdk_api.go:

func InitializeSdkApi(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	sdk, err := InitializeSdkUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := sdkapi.New(conf, logger, infrastructureInfrastructure, sdk)
	return service, nil
}

func InitializeSdkUsecase(conf *config.Config, logger logging.Logger, infra *infrastructure.Infrastructure) (sdk.Sdk, error) {
	databaseConfig := &conf.Database
	repositories := repos4.New(databaseConfig, logger)
	sdkSdk := sdk.New(conf, logger, infra, repositories)
	return sdkSdk, nil
}

// Injectors from wire_storage.go:

func InitializeStorage(conf *config.Config, logger logging.Logger) (services.Service, error) {
	infrastructureInfrastructure, err := infrastructure.New(conf, logger)
	if err != nil {
		return nil, err
	}
	storageStorage, err := InitializeStorageUsecase(conf, logger, infrastructureInfrastructure)
	if err != nil {
		return nil, err
	}
	service := storage.New(conf, logger, infrastructureInfrastructure, storageStorage)
	return service, nil
}

func InitializeStorageUsecase(conf *config.Config, logger logging.Logger, infra *infrastructure.Infrastructure) (storage2.Storage, error) {
	datastoreConfig := &conf.Datastore
	repositories := repos5.New(datastoreConfig, logger)
	storageStorage := storage2.New(conf, logger, infra, repositories)
	return storageStorage, nil
}

// wire_portal_api.go:

func ResolvePortalApiAuthenticatorConfig(conf *config.Config) *authenticator.Config {
	return &conf.PortalApi.Authenticator
}

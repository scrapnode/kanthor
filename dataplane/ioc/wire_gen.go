// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	config2 "github.com/scrapnode/kanthor/dataplane/config"
	"github.com/scrapnode/kanthor/dataplane/servers"
	"github.com/scrapnode/kanthor/infrastructure/config"
	"github.com/scrapnode/kanthor/infrastructure/database"
	"github.com/scrapnode/kanthor/infrastructure/ioc"
	"github.com/scrapnode/kanthor/infrastructure/logging"
	"github.com/scrapnode/kanthor/infrastructure/msgbroker"
)

// Injectors from wire.go:

func InitializeConfig(provider config.Provider) (*config2.Config, error) {
	configConfig, err := config2.New(provider)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func InitializeServer(provider config.Provider) (servers.Servers, error) {
	configConfig, err := InitializeConfig(provider)
	if err != nil {
		return nil, err
	}
	loggingConfig := GetLoggerConfig(configConfig)
	logger, err := ioc.InitializeLogger(loggingConfig)
	if err != nil {
		return nil, err
	}
	msgbrokerConfig := GetMsgBrokerConfig(configConfig)
	msgBroker, err := ioc.InitializeMsgBroker(logger, msgbrokerConfig)
	if err != nil {
		return nil, err
	}
	databaseConfig := GetDatabaseConfig(configConfig)
	database, err := ioc.InitializeDatabase(logger, databaseConfig)
	if err != nil {
		return nil, err
	}
	serversServers, err := servers.New(configConfig, logger, msgBroker, database)
	if err != nil {
		return nil, err
	}
	return serversServers, nil
}

// wire.go:

func GetLoggerConfig(conf *config2.Config) *logging.Config {
	return conf.Logger
}

func GetMsgBrokerConfig(conf *config2.Config) *msgbroker.Config {
	return conf.MsgBroker
}

func GetDatabaseConfig(conf *config2.Config) *database.Config {
	return conf.Database
}

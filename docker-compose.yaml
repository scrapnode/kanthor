version: "3.8"

services:
  streaming:
    container_name: kanthor-streaming
    image: nats:2.9
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "8222:8222"
      - "4222:4222"
    command: "-D -js --http_port 8222"

  warehouse:
    container_name: kanthor-warehouse
    image: postgres:13-alpine
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changemenow
    user: postgres
    healthcheck:
      test: [ "CMD", "pg_isready" , "-U", "postgres" ]
      interval: 8s
      timeout: 4s
      retries: 16

  cache:
    container_name: kanthor-cache
    image: redis:6-alpine
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 4s
      retries: 16

  migration-database:
    depends_on:
      warehouse:
        condition: service_healthy
    container_name: kanthor-services-migration-database
    build: .
    restart: on-failure
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command: 
      - kanthor
      - migrate
      - database
      - up

  migration-datastore:
    depends_on:
      warehouse:
        condition: service_healthy
    container_name: kanthor-services-migration-datastore
    build: .
    restart: on-failure
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command: 
      - kanthor
      - migrate
      - datastore
      - up

  sdkapi:
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-sdkapi
    build: .
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "8180:8180"
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - sdkapi

  portalapi:
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-portalapi
    build: .
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "8280:8280"
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - portalapi

  scheduler:
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-scheduler
    build: .
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - scheduler

  dispatcher:
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-dispatcher
    build: .
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - dispatcher

  storage:
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-storage
    build: .
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - storage

networks:
  kanthor:
    name: kanthor
version: "3.8"

services:
  streaming:
    container_name: kanthor-streaming
    image: nats:2.9
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "8222:8222"
      - "4222:4222"
    command: "-D -js --http_port 8222"

  warehouse:
    container_name: kanthor-warehouse
    image: postgres:13-alpine
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changemenow
    user: postgres
    healthcheck:
      test: [ "CMD", "pg_isready" , "-U", "postgres" ]
      interval: 8s
      timeout: 4s
      retries: 16

  cache:
    container_name: kanthor-cache
    image: redis:6-alpine
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 4s
      retries: 16

  migration-database:
    image: kanthor:localhost
    depends_on:
      warehouse:
        condition: service_healthy
    container_name: kanthor-services-migration-database
    build: .
    restart: on-failure
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
      - ./data:/app/data
    command: 
      - kanthor
      - migrate
      - database
      - up

  migration-datastore:
    image: kanthor:localhost
    depends_on:
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-migration-datastore
    restart: on-failure
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
      - ./data:/app/data
    command: 
      - kanthor
      - migrate
      - datastore
      - up

  sdk:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-sdk
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "8180:8180"
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - sdk

  portal:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-portal
    restart: unless-stopped
    networks:
      - kanthor
    ports:
      - "8280:8280"
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - portal

  scheduler:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-scheduler
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - scheduler

  dispatcher:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      cache:
        condition: service_healthy
      migration-database:
        condition: service_started
    container_name: kanthor-services-dispatcher
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - dispatcher

  storage:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-storage
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - storage
 
  recovery-cronjob:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-recovery-cronjob
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - recovery.cronjob
 
  recovery-consumer:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-recovery-consumer
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - recovery.consumer
 
  attempt-cronjob:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-attempt-cronjob
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - attempt.cronjob
 
  attempt-consumer:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-attempt-consumer
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - attempt.consumer
 
  attempt-selector:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-attempt-selector
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - attempt.selector
      
  attempt-endeavor:
    image: kanthor:localhost
    depends_on:
      streaming:
        condition: service_started
      warehouse:
        condition: service_healthy
      migration-database:
        condition: service_started
      migration-datastore:
        condition: service_started
    container_name: kanthor-services-attempt-endeavor
    restart: unless-stopped
    networks:
      - kanthor
    volumes:
      - ./docker/.kanthor:/root/.kanthor
    command:
      - kanthor
      - serve
      - attempt.endeavor

networks:
  kanthor:
    name: kanthor